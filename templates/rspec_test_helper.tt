# frozen_string_literal: true

require_relative "support/simplecov"
require "spec_helper"
ENV["RAILS_ENV"] ||= "test"
require_relative "../config/environment"

# Prevent database truncation if the environment is production
abort("The Rails environment is running in production mode!") if Rails.env.production?

require "rspec/rails"
require "capybara/rspec"
<% if @panacea.dig("faker") -%>
require "faker"
<% end -%>
<% if @panacea.dig("http_stubs") == "vcr" -%>
require "vcr"
<% end -%>
<% if @panacea.dig("http_stubs") == "webmock" -%>
require "webmock/rspec"
<% end -%>

# Add additional requires below this line. Rails is not loaded until this point!

# Checks for pending migrations and applies them before tests are run.
# If you are not using ActiveRecord, you can remove these lines.
begin
  ActiveRecord::Migration.maintain_test_schema!
rescue ActiveRecord::PendingMigrationError => e
  puts e.to_s.strip
  exit 1
end

<% if @panacea.dig("http_stubs") == "vcr" -%>
VCR.configure do |config|
  config.cassette_library_dir = "spec/vcr_cassettes"
  config.hook_into :webmock
end
<% end -%>

RSpec.configure do |config|
  config.fixture_path = "#{::Rails.root}/spec/fixtures"
  config.use_transactional_fixtures = true
  config.infer_spec_type_from_file_location!
  config.filter_rails_from_backtrace!
  <% if @panacea.dig("devise") -%>
  config.include Devise::Test::IntegrationHelpers, type: :request
  <% end -%>
  <% if @panacea.dig("factory_bot") -%>
  config.include FactoryBot::Syntax::Methods
  <% end -%>

  <% if @panacea.dig("headless_chrome") -%>
  Capybara.register_driver :chrome do |app|
    Capybara::Selenium::Driver.new(app, browser: :chrome)
  end

  Capybara.register_driver :headless_chrome do |app|
    capabilities = Selenium::WebDriver::Remote::Capabilities.chrome(
      chromeOptions: { args: %w(headless disable-gpu no-sandbox) }
    )

    Capybara::Selenium::Driver.new app, browser: :chrome, desired_capabilities: capabilities
  end

  Capybara.javascript_driver = :headless_chrome
  <% end %>
end
